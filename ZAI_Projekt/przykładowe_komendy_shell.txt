>>> from django.contrib.auth.models import User, Group
>>> from listings.models import Category, Tag, Listing, Profile
>>> from rest_framework_simplejwt.tokens import RefreshToken
>>> from django.db.models import Count, Avg
>>> from datetime import datetime, timedelta
>>> from decimal import Decimal

# --- Użytkownicy i grupy --------------------------------------------------
>>> # Tworzymy użytkownika i grupy „moderator” i „admin”
>>> user = User.objects.create_user(username='shelluser', password='pass')
>>> mod = User.objects.create_user(username='shellmod', password='pass')
>>> admin = User.objects.create_user(username='shelladmin', password='pass', is_staff=True)

>>> # Zakładamy, że grupy już istnieją z sygnału post_migrate, ale upewnijmy się:
>>> Group.objects.get_or_create(name='user')
(<Group: user>, False)
>>> Group.objects.get_or_create(name='moderators')
(<Group: moderators>, False)
>>> Group.objects.get_or_create(name='admin')
(<Group: admin>, False)

>>> # Przypisujemy shellmod do grupy moderatorów
>>> shellmod_group = Group.objects.get(name='moderators')
>>> mod.groups.add(shellmod_group)

>>> # Sprawdźmy grupy
>>> [g.name for g in mod.groups.all()]
['moderators']


# --- Profile ---------------------------------------------------------------
>>> # Profile tworzone w sygnale, ale jeśli nie, można wymusić:
>>> from listings.models import Profile
>>> Profile.objects.get_or_create(user=user)
(<Profile: Profile for shelluser>, False)

>>> # Aktualizacja telefonu
>>> profile = Profile.objects.get(user=user)
>>> profile.phone_number = '123-456-789'
>>> profile.save()
>>> profile.phone_number
'123-456-789'


# --- Kategorie i tagi -------------------------------------------------------
>>> cat1, _ = Category.objects.get_or_create(name='Elektronika')
>>> cat2, _ = Category.objects.get_or_create(name='Książki')

>>> tag1, _ = Tag.objects.get_or_create(name='Promocja')
>>> tag2, _ = Tag.objects.get_or_create(name='Okazyjnie')


# --- Tworzenie ogłoszeń ----------------------------------------------------
>>> # Tworzymy kilka listingów, część PENDING, część APPROVED
>>> now = datetime.now()
>>> for i in range(1, 8):
...     listing = Listing.objects.create(
...         title=f"Produkt {i}",
...         description=f"Opis produktu {i}",
...         price=Decimal(f"{i*10}.00"),
...         author=user,
...         category=cat1 if i % 2 == 0 else cat2,
...         status='APPROVED' if i % 3 != 0 else 'PENDING',
...         expires_at=now + timedelta(days=30)
...     )
...     # Dodajemy tagi
...     if i % 2 == 0:
...         listing.tags.add(tag1)
...     else:
...         listing.tags.add(tag2)
...     listing.save()

>>> # Sprawdźmy ile listingów
>>> Listing.objects.count()
7

>>> # Wyświetl kilka
>>> for l in Listing.objects.all():
    print(l.id, l.title, l.status, [t.name for t in l.tags.all()])
...
1 Produkt 1 PENDING ['Okazyjnie']
2 Produkt 2 APPROVED ['Promocja']
3 Produkt 3 PENDING ['Okazyjnie']
4 Produkt 4 APPROVED ['Promocja']
5 Produkt 5 PENDING ['Okazyjnie']
6 Produkt 6 APPROVED ['Promocja']
7 Produkt 7 PENDING ['Okazyjnie']


# --- Filtrowanie i agregacje ------------------------------------------------
>>> # Listingi only APPROVED
>>> approved = Listing.objects.filter(status='APPROVED')
>>> approved.count()
3

>>> # Średnia cena wszystkich ogłoszeń
>>> Listing.objects.aggregate(avg_price=Avg('price'))
{'avg_price': Decimal('40.00')}

>>> # Liczba listingów w każdej kategorii (annotate)
>>> Category.objects.annotate(count=Count('listings')).values('name', 'count')
<QuerySet [{'name': 'Elektronika', 'count': 3}, {'name': 'Książki', 'count': 4}]>

>>> # Raport: ile listingów według statusu
>>> Listing.objects.values('status').annotate(count=Count('id'))
<QuerySet [{'status': 'PENDING', 'count': 4}, {'status': 'APPROVED', 'count': 3}]>


# --- Uprawnienia i modyfikacje ------------------------------------------------
>>> # Shelluser próbuje edytować listing #1
>>> l1 = Listing.objects.get(pk=1)
>>> l1.author == user
True

>>> # Zmieńmy tytuł (jest autorem ⇒ można)
>>> l1.title = 'Zmieniony tytuł 1'
>>> l1.save()
>>> l1.title
'Zmieniony tytuł 1'

>>> # moderator (mod) może edytować cudze ogłoszenia
>>> l2 = Listing.objects.get(pk=2)
>>> l2.author == user
True
>>> # Symulacja uprawnienia: sprawdźmy kodowo
>>> mod.groups.filter(name='moderators').exists()
True
>>> # Zmieńmy tytuł jako moderator
>>> l2.title = 'Moderator zmienił tytuł'
>>> l2.save()
>>> l2.title
'Moderator zmienił tytuł'

>>> # Inny użytkownik (np. shelladmin, ale bez grupy moderator) nie jest autorem ⇒ nie może
>>> l3 = Listing.objects.get(pk=3)
>>> l3.author # shelluser
<User: shelluser>
>>> admin.is_staff
True
>>> # staff może edytować:
>>> l3.title = 'Admin zmienił tytuł'
>>> l3.save()
>>> l3.title
'Admin zmienił tytuł'


# --- Faworyzowanie ogłoszeń --------------------------------------------------
>>> # Użytkownik sheluser dodał produkt #2 do ulubionych
>>> l2.favorited_by.add(user)
>>> l2.favorited_by.all()
<QuerySet [<User: shelluser>]>

>>> # Lista wszystkich listingów, gdzie shelluser jest w favorited_by
>>> Listing.objects.filter(favorited_by=user).values('id', 'title')
<QuerySet [{'id': 2, 'title': 'Moderator zmienił tytuł'}]>


# --- Usuwanie listingów ------------------------------------------------------
>>> # shelluser usuwa listing #5 (jest autorem)
>>> l5 = Listing.objects.get(pk=5)
>>> l5.author == user
True
>>> l5.delete()
>>> Listing.objects.filter(pk=5).exists()
False

>>> # sprawdźmy, że przy usunięciu plików media (jeśli byłyby wstawione) nie pozostały pliki



# --- Generowanie tokenu JWT w shellem (przykład) -----------------------------
>>> # Używamy SimpleJWT – importujemy RefreshToken
>>> refresh = RefreshToken.for_user(user)
>>> access_token = str(refresh.access_token)
>>> refresh_token = str(refresh)
>>> access_token, refresh_token
('eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.…', 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.…')

>>> # Możesz teraz użyć `access_token` w nagłówkach żądań REST lub GraphQL.

